#pragma once
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>

namespace grip {

/**
* A representation of the different types of blurs that can be used.
*
*/
enum BlurType {
	BOX, GAUSSIAN, MEDIAN, BILATERAL
};
/**
* BallFinderPipeline class.
* 
* An OpenCV pipeline generated by GRIP.
*/
class BallFinderPipeline {
	private:
		bool switchSwitch;
		cv::Mat resizeImageOutput;
		cv::Mat blur0Output;
		cv::Mat hsvThreshold0Output;
		cv::Mat hsvThreshold1Output;
		cv::Mat hsvThreshold2Output;
		cv::Mat cvAddOutput;
		cv::Mat switchOutput;
		cv::Mat cvDilateOutput;
		cv::Mat cvErodeOutput;
		cv::Mat blur1Output;
		std::vector<cv::KeyPoint> findBlobsOutput;
		cv::Mat maskOutput;
		void resizeImage(cv::Mat &, double , double , int , cv::Mat &);
		void hsvThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void cvAdd(cv::Mat &, cv::Mat &, cv::Mat &);
		template<typename T>
		void pipelineswitch(bool sw, T &onTrue, T &onFalse, T &output);
		void cvDilate(cv::Mat &, cv::Mat &, cv::Point &, double , int , cv::Scalar &, cv::Mat &);
		void cvErode(cv::Mat &, cv::Mat &, cv::Point &, double , int , cv::Scalar &, cv::Mat &);
		void blur(cv::Mat &, BlurType &, double , cv::Mat &);
		void findBlobs(cv::Mat &, double , double [], bool , std::vector<cv::KeyPoint> &);
		void mask(cv::Mat &, cv::Mat &, cv::Mat &);

	public:
		BallFinderPipeline();
		void Process(cv::Mat& source0, bool& source1);
	 	void setSwitch0(bool value);
		cv::Mat* GetResizeImageOutput();
		cv::Mat* GetBlur0Output();
		cv::Mat* GetHsvThreshold0Output();
		cv::Mat* GetHsvThreshold1Output();
		cv::Mat* GetHsvThreshold2Output();
		cv::Mat* GetCvAddOutput();
		cv::Mat* GetSwitchOutput();
		cv::Mat* GetCvDilateOutput();
		cv::Mat* GetCvErodeOutput();
		cv::Mat* GetBlur1Output();
		std::vector<cv::KeyPoint>* GetFindBlobsOutput();
		cv::Mat* GetMaskOutput();
};


} // end namespace grip


